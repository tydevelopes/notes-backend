{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","content","onClick","services_notes","axios","get","then","response","data","newObject","post","id","put","concat","Notification","message","className","Footer","style","color","fontStyle","fontSize","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","notesToShow","filter","useEffect","console","log","noteService","initialNotes","length","components_Notification","map","components_Note","key","find","changeNote","objectSpread","returnedNote","catch","error","setTimeout","node","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","toConsumableArray","onChange","value","type","components_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"qNAYeA,EAVF,SAAAC,GAAgC,IAA7BC,EAA6BD,EAA7BC,KAAMC,EAAuBF,EAAvBE,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACEC,EAAAC,EAAAC,cAAA,UACGN,EAAKO,QACNH,EAAAC,EAAAC,cAAA,UAAQE,QAASP,GAAmBC,qBCG3BO,EARA,kBAAMC,IAAMC,IAFX,cAEwBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQnDL,EANA,SAAAM,GAAS,OACtBL,IAAMM,KALQ,aAKMD,GAAWH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAK5CL,EAHA,SAACQ,EAAIF,GAAL,OACbL,IAAMQ,IAAN,GAAAC,OARc,aAQd,KAAAA,OAAwBF,GAAMF,GAAWH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCAtDM,EAPM,SAAArB,GAAiB,IAAdsB,EAActB,EAAdsB,QACtB,OAAgB,OAAZA,EACK,KAGFjB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,SAASD,ICWlBE,EAhBA,WAOb,OACEnB,EAAAC,EAAAC,cAAA,OAAKkB,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKRvB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,qFC8ESsB,EApFH,SAAAC,GAAS,IAAAC,EACOC,mBAAS,IADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACLI,EADKJ,EAAA,GAAAK,EAEWN,mBAAS,IAFpBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEZE,EAFYD,EAAA,GAEHE,EAFGF,EAAA,GAAAG,EAGWV,oBAAS,GAHpBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGZE,EAHYD,EAAA,GAGHE,EAHGF,EAAA,GAAAG,EAIqBd,mBAAS,0BAJ9Be,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIZE,EAJYD,EAAA,GAIEE,EAJFF,EAAA,GA+CbG,EAAcN,EAAUR,EAAQA,EAAMe,OAAO,SAAAlD,GAAI,OAAIA,EAAKG,YAkBhE,OARAgD,oBAAU,WACRC,QAAQC,IAAI,UAEZC,IAAqB1C,KAAK,SAAA2C,GAAY,OAAInB,EAASmB,MAClD,IAEHH,QAAQC,IAAI,SAAUlB,EAAMqB,OAAQ,SAGlCpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACmD,EAAD,CAAcpC,QAAS0B,IACvB3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMoC,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlCvC,EAAAC,EAAAC,cAAA,UAzBF2C,EAAYS,IAAI,SAAA1D,GAAI,OAClBI,EAAAC,EAAAC,cAACqD,EAAD,CACE3D,KAAMA,EACN4D,IAAK5D,EAAKiB,GACVhB,iBAAkB,kBA5BG,SAAAgB,GACzB,IAAMjB,EAAOmC,EAAM0B,KAAK,SAAA7D,GAAI,OAAIA,EAAKiB,KAAOA,IACtC6C,EAAU7B,OAAA8B,EAAA,EAAA9B,CAAA,GAAQjC,EAAR,CAAcG,WAAYH,EAAKG,YAE/CmD,EACUrC,EAAI6C,GACXlD,KAAK,SAAAoD,GACJ5B,EAASD,EAAMuB,IAAI,SAAA1D,GAAI,OAAKA,EAAKiB,KAAOA,EAAKjB,EAAOgE,OAErDC,MAAM,SAAAC,GACLd,QAAQC,IAAIa,GAEZlB,EAAe,SAAA7B,OACJnB,EAAKO,QADD,sCAGf4D,WAAW,WACTnB,EAAgB,OACf,KACHZ,EAASD,EAAMe,OAAO,SAAAkB,GAAI,OAAIA,EAAKnD,KAAOA,OAUlBoD,CAAmBrE,EAAKiB,UAsBlDb,EAAAC,EAAAC,cAAA,QAAMgE,SArEM,SAAAC,GACdA,EAAMC,iBACNpB,QAAQC,IAAI,iBAAkBkB,EAAME,QACpC,IAAMC,EAAa,CACjBnE,QAASgC,EACToC,MAAM,IAAIC,MAAOC,cACjB1E,UAAW2E,KAAKC,SAAW,IAE7BzB,EAAmBoB,GAAY9D,KAAK,SAAAoD,GAClC5B,EAAQ,GAAAjB,OAAAc,OAAA+C,EAAA,EAAA/C,CAAKE,GAAL,CAAY6B,KACpBxB,EAAW,QA4DTpC,EAAAC,EAAAC,cAAA,SAAO2E,SAxDY,SAAAV,GACvBnB,QAAQC,IAAIkB,EAAME,OAAOS,OACzB1C,EAAW+B,EAAME,OAAOS,QAsDeA,MAAO3C,IAC1CnC,EAAAC,EAAAC,cAAA,UAAQ6E,KAAK,UAAb,SAEF/E,EAAAC,EAAAC,cAAC8E,EAAD,cChFNC,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.58f713ef.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\nexport default Note;\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => axios.get(baseUrl).then(response => response.data);\n\nconst create = newObject =>\n  axios.post(baseUrl, newObject).then(response => response.data);\n\nconst update = (id, newObject) =>\n  axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data);\n\nexport default {\n  getAll,\n  create,\n  update\n};\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\nexport default Notification;\n","import React from 'react';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2019\n      </em>\n    </div>\n  );\n};\nexport default Footer;\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\n\nconst App = props => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...');\n\n  const addNote = event => {\n    event.preventDefault();\n    console.log('button clicked', event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    };\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes([...notes, returnedNote]);\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(note => note.id === id);\n    const changeNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changeNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\n      })\n      .catch(error => {\n        console.log(error);\n\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 3000);\n        setNotes(notes.filter(node => node.id !== id));\n      });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  const rows = () =>\n    notesToShow.map(note => (\n      <Note\n        note={note}\n        key={note.id}\n        toggleImportance={() => toggleImportanceOf(note.id)}\n      />\n    ));\n\n  useEffect(() => {\n    console.log('effect');\n\n    noteService.getAll().then(initialNotes => setNotes(initialNotes));\n  }, []);\n\n  console.log('render', notes.length, 'notes');\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>{rows()}</ul>\n      <form onSubmit={addNote}>\n        <input onChange={handleNoteChange} value={newNote} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}